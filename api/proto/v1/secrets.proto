syntax = "proto3";

package api.proto.v1;

option go_package = "github.com/a-x-a/gophkeeper/goph;goph";

import "google/protobuf/field_mask.proto";

// Type of stored data.
enum DataKind {
  DATA_KIND_UNSPECIFIED = 0; // Unspecified.
  DATA_KIND_BINARY = 1; // Arbitrary binary data.
  DATA_KIND_TEXT = 2; // Arbitrary text data.
  DATA_KIND_CREDENTIALS = 3; // Authentication credentials.
  DATA_KIND_CARD = 4; // Bank card info.
}

message Secret {
  string id = 1; // ID of a secret in UUIDv4 form.
  string name = 2; // Name of a secret.
  DataKind kind = 3; // Type of stored data.
  bytes metadata = 4; // Arbitrary encrypted description (activation codes, bank names etc).
}

message CreateRequest {
  string name = 1; // Name of a secret.
  bytes metadata = 2; // Arbitrary description data encrypted by client.
  DataKind kind = 3; // Type of stored data.
  bytes data = 4; // Actual secret data encrypted by client, see data.proto.
}

message CreateResponse {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message ListRequest {
}

message ListResponse {
  repeated Secret secrets = 1; // List of secrets created by current user.
}

message GetRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message GetResponse {
  Secret secret = 1; // Secret info.
  bytes data = 2; // Actual encrypted secret data, see data.proto.
}

message UpdateRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
  google.protobuf.FieldMask update_mask = 2; // Specifies what values should be changed.
  string name = 3; // Name of a secret.
  bytes metadata = 4; // Arbitrary description data encrypted by client.
  bytes data = 5; // Actual secret data encrypted by client, see data.proto.
}

message UpdateResponse {
}

message DeleteRequest {
  string id = 1; // ID of a secret in UUIDv4 form.
}

message DeleteResponse {
}

// All commands require valid access_token passed in metadata.
service SecretsService {
  // Store new secret.
  rpc Create(CreateRequest) returns (CreateResponse);
  // List brief secrets without data for the current user.
  rpc List(ListRequest) returns (ListResponse);
  // Get a secret with data.
  rpc Get(GetRequest) returns (GetResponse);
  // Change a secret and/or stored data.
  rpc Update(UpdateRequest) returns (UpdateResponse);
  // Remove a secret.
  rpc Delete(DeleteRequest) returns (DeleteResponse);
}
